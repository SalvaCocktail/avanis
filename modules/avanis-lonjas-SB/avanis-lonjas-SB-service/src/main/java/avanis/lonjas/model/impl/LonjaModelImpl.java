/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package avanis.lonjas.model.impl;

import avanis.lonjas.model.Lonja;
import avanis.lonjas.model.LonjaModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Lonja service. Represents a row in the &quot;AVANIS_LONJAS_Lonja&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LonjaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LonjaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LonjaImpl
 * @generated
 */
@JSON(strict = true)
public class LonjaModelImpl extends BaseModelImpl<Lonja> implements LonjaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lonja model instance should use the <code>Lonja</code> interface instead.
	 */
	public static final String TABLE_NAME = "AVANIS_LONJAS_Lonja";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"entityId", Types.BIGINT},
		{"lonjaId", Types.BIGINT}, {"nombre", Types.VARCHAR},
		{"pais", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lonjaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pais", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AVANIS_LONJAS_Lonja (uuid_ VARCHAR(75) null,entityId LONG not null primary key,lonjaId LONG,nombre VARCHAR(255) null,pais VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table AVANIS_LONJAS_Lonja";

	public static final String ORDER_BY_JPQL = " ORDER BY lonja.lonjaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AVANIS_LONJAS_Lonja.lonjaId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LONJAID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOMBRE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LonjaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Lonja.class;
	}

	@Override
	public String getModelClassName() {
		return Lonja.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Lonja, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Lonja, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Lonja, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Lonja)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Lonja, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Lonja, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Lonja)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Lonja, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Lonja, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Lonja, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Lonja, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Lonja, Object>>();

			attributeGetterFunctions.put("uuid", Lonja::getUuid);
			attributeGetterFunctions.put("entityId", Lonja::getEntityId);
			attributeGetterFunctions.put("lonjaId", Lonja::getLonjaId);
			attributeGetterFunctions.put("nombre", Lonja::getNombre);
			attributeGetterFunctions.put("pais", Lonja::getPais);
			attributeGetterFunctions.put("createDate", Lonja::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Lonja::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Lonja, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Lonja, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Lonja, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Lonja, String>)Lonja::setUuid);
			attributeSetterBiConsumers.put(
				"entityId", (BiConsumer<Lonja, Long>)Lonja::setEntityId);
			attributeSetterBiConsumers.put(
				"lonjaId", (BiConsumer<Lonja, Long>)Lonja::setLonjaId);
			attributeSetterBiConsumers.put(
				"nombre", (BiConsumer<Lonja, String>)Lonja::setNombre);
			attributeSetterBiConsumers.put(
				"pais", (BiConsumer<Lonja, String>)Lonja::setPais);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<Lonja, Date>)Lonja::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Lonja, Date>)Lonja::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	@JSON
	@Override
	public long getLonjaId() {
		return _lonjaId;
	}

	@Override
	public void setLonjaId(long lonjaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lonjaId = lonjaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalLonjaId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("lonjaId"));
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nombre = nombre;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNombre() {
		return getColumnOriginalValue("nombre");
	}

	@JSON
	@Override
	public String getPais() {
		if (_pais == null) {
			return "";
		}
		else {
			return _pais;
		}
	}

	@Override
	public void setPais(String pais) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pais = pais;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Lonja.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Lonja toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Lonja>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LonjaImpl lonjaImpl = new LonjaImpl();

		lonjaImpl.setUuid(getUuid());
		lonjaImpl.setEntityId(getEntityId());
		lonjaImpl.setLonjaId(getLonjaId());
		lonjaImpl.setNombre(getNombre());
		lonjaImpl.setPais(getPais());
		lonjaImpl.setCreateDate(getCreateDate());
		lonjaImpl.setModifiedDate(getModifiedDate());

		lonjaImpl.resetOriginalValues();

		return lonjaImpl;
	}

	@Override
	public Lonja cloneWithOriginalValues() {
		LonjaImpl lonjaImpl = new LonjaImpl();

		lonjaImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		lonjaImpl.setEntityId(this.<Long>getColumnOriginalValue("entityId"));
		lonjaImpl.setLonjaId(this.<Long>getColumnOriginalValue("lonjaId"));
		lonjaImpl.setNombre(this.<String>getColumnOriginalValue("nombre"));
		lonjaImpl.setPais(this.<String>getColumnOriginalValue("pais"));
		lonjaImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		lonjaImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return lonjaImpl;
	}

	@Override
	public int compareTo(Lonja lonja) {
		int value = 0;

		if (getLonjaId() < lonja.getLonjaId()) {
			value = -1;
		}
		else if (getLonjaId() > lonja.getLonjaId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Lonja)) {
			return false;
		}

		Lonja lonja = (Lonja)object;

		long primaryKey = lonja.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Lonja> toCacheModel() {
		LonjaCacheModel lonjaCacheModel = new LonjaCacheModel();

		lonjaCacheModel.uuid = getUuid();

		String uuid = lonjaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			lonjaCacheModel.uuid = null;
		}

		lonjaCacheModel.entityId = getEntityId();

		lonjaCacheModel.lonjaId = getLonjaId();

		lonjaCacheModel.nombre = getNombre();

		String nombre = lonjaCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			lonjaCacheModel.nombre = null;
		}

		lonjaCacheModel.pais = getPais();

		String pais = lonjaCacheModel.pais;

		if ((pais != null) && (pais.length() == 0)) {
			lonjaCacheModel.pais = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			lonjaCacheModel.createDate = createDate.getTime();
		}
		else {
			lonjaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lonjaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lonjaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return lonjaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Lonja, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Lonja, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Lonja, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Lonja)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Lonja>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Lonja.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _entityId;
	private long _lonjaId;
	private String _nombre;
	private String _pais;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Lonja, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Lonja)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("lonjaId", _lonjaId);
		_columnOriginalValues.put("nombre", _nombre);
		_columnOriginalValues.put("pais", _pais);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("entityId", 2L);

		columnBitmasks.put("lonjaId", 4L);

		columnBitmasks.put("nombre", 8L);

		columnBitmasks.put("pais", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Lonja _escapedModel;

}