/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package avanis.lonjas.model.impl;

import avanis.lonjas.model.FechaLonja;
import avanis.lonjas.model.FechaLonjaModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FechaLonja service. Represents a row in the &quot;AVANIS_LONJAS_FechaLonja&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FechaLonjaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FechaLonjaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FechaLonjaImpl
 * @generated
 */
@JSON(strict = true)
public class FechaLonjaModelImpl
	extends BaseModelImpl<FechaLonja> implements FechaLonjaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fecha lonja model instance should use the <code>FechaLonja</code> interface instead.
	 */
	public static final String TABLE_NAME = "AVANIS_LONJAS_FechaLonja";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"entityId", Types.BIGINT},
		{"lonjaId", Types.BIGINT}, {"fecha", Types.TIMESTAMP},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lonjaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fecha", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AVANIS_LONJAS_FechaLonja (uuid_ VARCHAR(75) null,entityId LONG not null primary key,lonjaId LONG,fecha DATE null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table AVANIS_LONJAS_FechaLonja";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fechaLonja.lonjaId ASC, fechaLonja.fecha DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AVANIS_LONJAS_FechaLonja.lonjaId ASC, AVANIS_LONJAS_FechaLonja.fecha DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LONJAID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FECHA_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FechaLonjaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FechaLonja.class;
	}

	@Override
	public String getModelClassName() {
		return FechaLonja.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FechaLonja, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FechaLonja, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FechaLonja, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((FechaLonja)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FechaLonja, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FechaLonja, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FechaLonja)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FechaLonja, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FechaLonja, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FechaLonja, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FechaLonja, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<FechaLonja, Object>>();

			attributeGetterFunctions.put("uuid", FechaLonja::getUuid);
			attributeGetterFunctions.put("entityId", FechaLonja::getEntityId);
			attributeGetterFunctions.put("lonjaId", FechaLonja::getLonjaId);
			attributeGetterFunctions.put("fecha", FechaLonja::getFecha);
			attributeGetterFunctions.put(
				"createDate", FechaLonja::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FechaLonja::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<FechaLonja, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FechaLonja, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<FechaLonja, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<FechaLonja, String>)FechaLonja::setUuid);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<FechaLonja, Long>)FechaLonja::setEntityId);
			attributeSetterBiConsumers.put(
				"lonjaId",
				(BiConsumer<FechaLonja, Long>)FechaLonja::setLonjaId);
			attributeSetterBiConsumers.put(
				"fecha", (BiConsumer<FechaLonja, Date>)FechaLonja::setFecha);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FechaLonja, Date>)FechaLonja::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FechaLonja, Date>)FechaLonja::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	@JSON
	@Override
	public long getLonjaId() {
		return _lonjaId;
	}

	@Override
	public void setLonjaId(long lonjaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lonjaId = lonjaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalLonjaId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("lonjaId"));
	}

	@JSON
	@Override
	public Date getFecha() {
		return _fecha;
	}

	@Override
	public void setFecha(Date fecha) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fecha = fecha;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, FechaLonja.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FechaLonja toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FechaLonja>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FechaLonjaImpl fechaLonjaImpl = new FechaLonjaImpl();

		fechaLonjaImpl.setUuid(getUuid());
		fechaLonjaImpl.setEntityId(getEntityId());
		fechaLonjaImpl.setLonjaId(getLonjaId());
		fechaLonjaImpl.setFecha(getFecha());
		fechaLonjaImpl.setCreateDate(getCreateDate());
		fechaLonjaImpl.setModifiedDate(getModifiedDate());

		fechaLonjaImpl.resetOriginalValues();

		return fechaLonjaImpl;
	}

	@Override
	public FechaLonja cloneWithOriginalValues() {
		FechaLonjaImpl fechaLonjaImpl = new FechaLonjaImpl();

		fechaLonjaImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		fechaLonjaImpl.setEntityId(
			this.<Long>getColumnOriginalValue("entityId"));
		fechaLonjaImpl.setLonjaId(this.<Long>getColumnOriginalValue("lonjaId"));
		fechaLonjaImpl.setFecha(this.<Date>getColumnOriginalValue("fecha"));
		fechaLonjaImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		fechaLonjaImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return fechaLonjaImpl;
	}

	@Override
	public int compareTo(FechaLonja fechaLonja) {
		int value = 0;

		if (getLonjaId() < fechaLonja.getLonjaId()) {
			value = -1;
		}
		else if (getLonjaId() > fechaLonja.getLonjaId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getFecha(), fechaLonja.getFecha());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FechaLonja)) {
			return false;
		}

		FechaLonja fechaLonja = (FechaLonja)object;

		long primaryKey = fechaLonja.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FechaLonja> toCacheModel() {
		FechaLonjaCacheModel fechaLonjaCacheModel = new FechaLonjaCacheModel();

		fechaLonjaCacheModel.uuid = getUuid();

		String uuid = fechaLonjaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fechaLonjaCacheModel.uuid = null;
		}

		fechaLonjaCacheModel.entityId = getEntityId();

		fechaLonjaCacheModel.lonjaId = getLonjaId();

		Date fecha = getFecha();

		if (fecha != null) {
			fechaLonjaCacheModel.fecha = fecha.getTime();
		}
		else {
			fechaLonjaCacheModel.fecha = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fechaLonjaCacheModel.createDate = createDate.getTime();
		}
		else {
			fechaLonjaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fechaLonjaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fechaLonjaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return fechaLonjaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FechaLonja, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FechaLonja, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FechaLonja, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FechaLonja)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FechaLonja>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FechaLonja.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _entityId;
	private long _lonjaId;
	private Date _fecha;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FechaLonja, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FechaLonja)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("lonjaId", _lonjaId);
		_columnOriginalValues.put("fecha", _fecha);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("entityId", 2L);

		columnBitmasks.put("lonjaId", 4L);

		columnBitmasks.put("fecha", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FechaLonja _escapedModel;

}