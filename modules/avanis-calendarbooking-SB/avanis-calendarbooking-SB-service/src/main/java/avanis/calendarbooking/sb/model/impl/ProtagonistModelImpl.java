/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package avanis.calendarbooking.sb.model.impl;

import avanis.calendarbooking.sb.model.Protagonist;
import avanis.calendarbooking.sb.model.ProtagonistModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Protagonist service. Represents a row in the &quot;AVANIS_CALENDAR_Protagonist&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProtagonistModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProtagonistImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProtagonistImpl
 * @generated
 */
@JSON(strict = true)
public class ProtagonistModelImpl
	extends BaseModelImpl<Protagonist> implements ProtagonistModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a protagonist model instance should use the <code>Protagonist</code> interface instead.
	 */
	public static final String TABLE_NAME = "AVANIS_CALENDAR_Protagonist";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"protagonistId", Types.BIGINT},
		{"calendarBookingId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"name", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"profession", Types.VARCHAR},
		{"bio", Types.VARCHAR}, {"portraitUrl", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("protagonistId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("calendarBookingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("profession", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portraitUrl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AVANIS_CALENDAR_Protagonist (uuid_ VARCHAR(75) null,protagonistId LONG not null primary key,calendarBookingId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,lastName VARCHAR(75) null,profession VARCHAR(75) null,bio VARCHAR(75) null,portraitUrl VARCHAR(500) null)";

	public static final String TABLE_SQL_DROP =
		"drop table AVANIS_CALENDAR_Protagonist";

	public static final String ORDER_BY_JPQL =
		" ORDER BY protagonist.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AVANIS_CALENDAR_Protagonist.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CALENDARBOOKINGID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProtagonistModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _protagonistId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProtagonistId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _protagonistId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Protagonist.class;
	}

	@Override
	public String getModelClassName() {
		return Protagonist.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Protagonist, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Protagonist, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Protagonist, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Protagonist)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Protagonist, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Protagonist, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Protagonist)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Protagonist, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Protagonist, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Protagonist, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Protagonist, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Protagonist, Object>>();

			attributeGetterFunctions.put("uuid", Protagonist::getUuid);
			attributeGetterFunctions.put(
				"protagonistId", Protagonist::getProtagonistId);
			attributeGetterFunctions.put(
				"calendarBookingId", Protagonist::getCalendarBookingId);
			attributeGetterFunctions.put("groupId", Protagonist::getGroupId);
			attributeGetterFunctions.put(
				"companyId", Protagonist::getCompanyId);
			attributeGetterFunctions.put("userId", Protagonist::getUserId);
			attributeGetterFunctions.put("userName", Protagonist::getUserName);
			attributeGetterFunctions.put(
				"createDate", Protagonist::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Protagonist::getModifiedDate);
			attributeGetterFunctions.put("name", Protagonist::getName);
			attributeGetterFunctions.put("lastName", Protagonist::getLastName);
			attributeGetterFunctions.put(
				"profession", Protagonist::getProfession);
			attributeGetterFunctions.put("bio", Protagonist::getBio);
			attributeGetterFunctions.put(
				"portraitUrl", Protagonist::getPortraitUrl);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Protagonist, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Protagonist, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Protagonist, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Protagonist, String>)Protagonist::setUuid);
			attributeSetterBiConsumers.put(
				"protagonistId",
				(BiConsumer<Protagonist, Long>)Protagonist::setProtagonistId);
			attributeSetterBiConsumers.put(
				"calendarBookingId",
				(BiConsumer<Protagonist, Long>)
					Protagonist::setCalendarBookingId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<Protagonist, Long>)Protagonist::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Protagonist, Long>)Protagonist::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<Protagonist, Long>)Protagonist::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Protagonist, String>)Protagonist::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Protagonist, Date>)Protagonist::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Protagonist, Date>)Protagonist::setModifiedDate);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<Protagonist, String>)Protagonist::setName);
			attributeSetterBiConsumers.put(
				"lastName",
				(BiConsumer<Protagonist, String>)Protagonist::setLastName);
			attributeSetterBiConsumers.put(
				"profession",
				(BiConsumer<Protagonist, String>)Protagonist::setProfession);
			attributeSetterBiConsumers.put(
				"bio", (BiConsumer<Protagonist, String>)Protagonist::setBio);
			attributeSetterBiConsumers.put(
				"portraitUrl",
				(BiConsumer<Protagonist, String>)Protagonist::setPortraitUrl);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getProtagonistId() {
		return _protagonistId;
	}

	@Override
	public void setProtagonistId(long protagonistId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_protagonistId = protagonistId;
	}

	@JSON
	@Override
	public long getCalendarBookingId() {
		return _calendarBookingId;
	}

	@Override
	public void setCalendarBookingId(long calendarBookingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_calendarBookingId = calendarBookingId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCalendarBookingId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("calendarBookingId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getProfession() {
		if (_profession == null) {
			return "";
		}
		else {
			return _profession;
		}
	}

	@Override
	public void setProfession(String profession) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_profession = profession;
	}

	@JSON
	@Override
	public String getBio() {
		if (_bio == null) {
			return "";
		}
		else {
			return _bio;
		}
	}

	@Override
	public void setBio(String bio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bio = bio;
	}

	@JSON
	@Override
	public String getPortraitUrl() {
		if (_portraitUrl == null) {
			return "";
		}
		else {
			return _portraitUrl;
		}
	}

	@Override
	public void setPortraitUrl(String portraitUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_portraitUrl = portraitUrl;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Protagonist.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Protagonist.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Protagonist toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Protagonist>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProtagonistImpl protagonistImpl = new ProtagonistImpl();

		protagonistImpl.setUuid(getUuid());
		protagonistImpl.setProtagonistId(getProtagonistId());
		protagonistImpl.setCalendarBookingId(getCalendarBookingId());
		protagonistImpl.setGroupId(getGroupId());
		protagonistImpl.setCompanyId(getCompanyId());
		protagonistImpl.setUserId(getUserId());
		protagonistImpl.setUserName(getUserName());
		protagonistImpl.setCreateDate(getCreateDate());
		protagonistImpl.setModifiedDate(getModifiedDate());
		protagonistImpl.setName(getName());
		protagonistImpl.setLastName(getLastName());
		protagonistImpl.setProfession(getProfession());
		protagonistImpl.setBio(getBio());
		protagonistImpl.setPortraitUrl(getPortraitUrl());

		protagonistImpl.resetOriginalValues();

		return protagonistImpl;
	}

	@Override
	public Protagonist cloneWithOriginalValues() {
		ProtagonistImpl protagonistImpl = new ProtagonistImpl();

		protagonistImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		protagonistImpl.setProtagonistId(
			this.<Long>getColumnOriginalValue("protagonistId"));
		protagonistImpl.setCalendarBookingId(
			this.<Long>getColumnOriginalValue("calendarBookingId"));
		protagonistImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		protagonistImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		protagonistImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		protagonistImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		protagonistImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		protagonistImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		protagonistImpl.setName(this.<String>getColumnOriginalValue("name"));
		protagonistImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		protagonistImpl.setProfession(
			this.<String>getColumnOriginalValue("profession"));
		protagonistImpl.setBio(this.<String>getColumnOriginalValue("bio"));
		protagonistImpl.setPortraitUrl(
			this.<String>getColumnOriginalValue("portraitUrl"));

		return protagonistImpl;
	}

	@Override
	public int compareTo(Protagonist protagonist) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), protagonist.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Protagonist)) {
			return false;
		}

		Protagonist protagonist = (Protagonist)object;

		long primaryKey = protagonist.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Protagonist> toCacheModel() {
		ProtagonistCacheModel protagonistCacheModel =
			new ProtagonistCacheModel();

		protagonistCacheModel.uuid = getUuid();

		String uuid = protagonistCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			protagonistCacheModel.uuid = null;
		}

		protagonistCacheModel.protagonistId = getProtagonistId();

		protagonistCacheModel.calendarBookingId = getCalendarBookingId();

		protagonistCacheModel.groupId = getGroupId();

		protagonistCacheModel.companyId = getCompanyId();

		protagonistCacheModel.userId = getUserId();

		protagonistCacheModel.userName = getUserName();

		String userName = protagonistCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			protagonistCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			protagonistCacheModel.createDate = createDate.getTime();
		}
		else {
			protagonistCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			protagonistCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			protagonistCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		protagonistCacheModel.name = getName();

		String name = protagonistCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			protagonistCacheModel.name = null;
		}

		protagonistCacheModel.lastName = getLastName();

		String lastName = protagonistCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			protagonistCacheModel.lastName = null;
		}

		protagonistCacheModel.profession = getProfession();

		String profession = protagonistCacheModel.profession;

		if ((profession != null) && (profession.length() == 0)) {
			protagonistCacheModel.profession = null;
		}

		protagonistCacheModel.bio = getBio();

		String bio = protagonistCacheModel.bio;

		if ((bio != null) && (bio.length() == 0)) {
			protagonistCacheModel.bio = null;
		}

		protagonistCacheModel.portraitUrl = getPortraitUrl();

		String portraitUrl = protagonistCacheModel.portraitUrl;

		if ((portraitUrl != null) && (portraitUrl.length() == 0)) {
			protagonistCacheModel.portraitUrl = null;
		}

		return protagonistCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Protagonist, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Protagonist, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Protagonist, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Protagonist)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Protagonist>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Protagonist.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _protagonistId;
	private long _calendarBookingId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _lastName;
	private String _profession;
	private String _bio;
	private String _portraitUrl;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Protagonist, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Protagonist)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("protagonistId", _protagonistId);
		_columnOriginalValues.put("calendarBookingId", _calendarBookingId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("profession", _profession);
		_columnOriginalValues.put("bio", _bio);
		_columnOriginalValues.put("portraitUrl", _portraitUrl);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("protagonistId", 2L);

		columnBitmasks.put("calendarBookingId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("name", 512L);

		columnBitmasks.put("lastName", 1024L);

		columnBitmasks.put("profession", 2048L);

		columnBitmasks.put("bio", 4096L);

		columnBitmasks.put("portraitUrl", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Protagonist _escapedModel;

}