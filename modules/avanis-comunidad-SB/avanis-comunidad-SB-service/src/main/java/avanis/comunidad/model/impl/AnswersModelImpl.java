/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package avanis.comunidad.model.impl;

import avanis.comunidad.model.Answers;
import avanis.comunidad.model.AnswersModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Answers service. Represents a row in the &quot;AVANIS_COMUNIDAD_Answers&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AnswersModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnswersImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AnswersImpl
 * @generated
 */
@JSON(strict = true)
public class AnswersModelImpl
	extends BaseModelImpl<Answers> implements AnswersModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a answers model instance should use the <code>Answers</code> interface instead.
	 */
	public static final String TABLE_NAME = "AVANIS_COMUNIDAD_Answers";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"answerId", Types.BIGINT},
		{"surveyId", Types.BIGINT}, {"answer", Types.VARCHAR},
		{"counterAnswer", Types.INTEGER}, {"createDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("surveyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counterAnswer", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AVANIS_COMUNIDAD_Answers (uuid_ VARCHAR(75) null,answerId LONG not null primary key,surveyId LONG,answer VARCHAR(255) null,counterAnswer INTEGER,createDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table AVANIS_COMUNIDAD_Answers";

	public static final String ORDER_BY_JPQL = " ORDER BY answers.answerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AVANIS_COMUNIDAD_Answers.answerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SURVEYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ANSWERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AnswersModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _answerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnswerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _answerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Answers.class;
	}

	@Override
	public String getModelClassName() {
		return Answers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Answers, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Answers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Answers, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Answers)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Answers, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Answers, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Answers)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Answers, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Answers, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Answers, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Answers, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Answers, Object>>();

			attributeGetterFunctions.put("uuid", Answers::getUuid);
			attributeGetterFunctions.put("answerId", Answers::getAnswerId);
			attributeGetterFunctions.put("surveyId", Answers::getSurveyId);
			attributeGetterFunctions.put("answer", Answers::getAnswer);
			attributeGetterFunctions.put(
				"counterAnswer", Answers::getCounterAnswer);
			attributeGetterFunctions.put("createDate", Answers::getCreateDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Answers, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Answers, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Answers, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Answers, String>)Answers::setUuid);
			attributeSetterBiConsumers.put(
				"answerId", (BiConsumer<Answers, Long>)Answers::setAnswerId);
			attributeSetterBiConsumers.put(
				"surveyId", (BiConsumer<Answers, Long>)Answers::setSurveyId);
			attributeSetterBiConsumers.put(
				"answer", (BiConsumer<Answers, String>)Answers::setAnswer);
			attributeSetterBiConsumers.put(
				"counterAnswer",
				(BiConsumer<Answers, Integer>)Answers::setCounterAnswer);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Answers, Date>)Answers::setCreateDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAnswerId() {
		return _answerId;
	}

	@Override
	public void setAnswerId(long answerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_answerId = answerId;
	}

	@JSON
	@Override
	public long getSurveyId() {
		return _surveyId;
	}

	@Override
	public void setSurveyId(long surveyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surveyId = surveyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSurveyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("surveyId"));
	}

	@JSON
	@Override
	public String getAnswer() {
		if (_answer == null) {
			return "";
		}
		else {
			return _answer;
		}
	}

	@Override
	public void setAnswer(String answer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_answer = answer;
	}

	@JSON
	@Override
	public int getCounterAnswer() {
		return _counterAnswer;
	}

	@Override
	public void setCounterAnswer(int counterAnswer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counterAnswer = counterAnswer;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Answers.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Answers toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Answers>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnswersImpl answersImpl = new AnswersImpl();

		answersImpl.setUuid(getUuid());
		answersImpl.setAnswerId(getAnswerId());
		answersImpl.setSurveyId(getSurveyId());
		answersImpl.setAnswer(getAnswer());
		answersImpl.setCounterAnswer(getCounterAnswer());
		answersImpl.setCreateDate(getCreateDate());

		answersImpl.resetOriginalValues();

		return answersImpl;
	}

	@Override
	public Answers cloneWithOriginalValues() {
		AnswersImpl answersImpl = new AnswersImpl();

		answersImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		answersImpl.setAnswerId(this.<Long>getColumnOriginalValue("answerId"));
		answersImpl.setSurveyId(this.<Long>getColumnOriginalValue("surveyId"));
		answersImpl.setAnswer(this.<String>getColumnOriginalValue("answer"));
		answersImpl.setCounterAnswer(
			this.<Integer>getColumnOriginalValue("counterAnswer"));
		answersImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));

		return answersImpl;
	}

	@Override
	public int compareTo(Answers answers) {
		int value = 0;

		if (getAnswerId() < answers.getAnswerId()) {
			value = -1;
		}
		else if (getAnswerId() > answers.getAnswerId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Answers)) {
			return false;
		}

		Answers answers = (Answers)object;

		long primaryKey = answers.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Answers> toCacheModel() {
		AnswersCacheModel answersCacheModel = new AnswersCacheModel();

		answersCacheModel.uuid = getUuid();

		String uuid = answersCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			answersCacheModel.uuid = null;
		}

		answersCacheModel.answerId = getAnswerId();

		answersCacheModel.surveyId = getSurveyId();

		answersCacheModel.answer = getAnswer();

		String answer = answersCacheModel.answer;

		if ((answer != null) && (answer.length() == 0)) {
			answersCacheModel.answer = null;
		}

		answersCacheModel.counterAnswer = getCounterAnswer();

		Date createDate = getCreateDate();

		if (createDate != null) {
			answersCacheModel.createDate = createDate.getTime();
		}
		else {
			answersCacheModel.createDate = Long.MIN_VALUE;
		}

		return answersCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Answers, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Answers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Answers, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Answers)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Answers>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Answers.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _answerId;
	private long _surveyId;
	private String _answer;
	private int _counterAnswer;
	private Date _createDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Answers, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Answers)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("answerId", _answerId);
		_columnOriginalValues.put("surveyId", _surveyId);
		_columnOriginalValues.put("answer", _answer);
		_columnOriginalValues.put("counterAnswer", _counterAnswer);
		_columnOriginalValues.put("createDate", _createDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("answerId", 2L);

		columnBitmasks.put("surveyId", 4L);

		columnBitmasks.put("answer", 8L);

		columnBitmasks.put("counterAnswer", 16L);

		columnBitmasks.put("createDate", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Answers _escapedModel;

}