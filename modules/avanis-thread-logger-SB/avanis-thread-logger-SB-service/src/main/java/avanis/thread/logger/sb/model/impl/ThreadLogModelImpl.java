/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package avanis.thread.logger.sb.model.impl;

import avanis.thread.logger.sb.model.ThreadLog;
import avanis.thread.logger.sb.model.ThreadLogModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ThreadLog service. Represents a row in the &quot;ThreadLogger_ThreadLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ThreadLogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ThreadLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ThreadLogImpl
 * @generated
 */
public class ThreadLogModelImpl
	extends BaseModelImpl<ThreadLog> implements ThreadLogModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a thread log model instance should use the <code>ThreadLog</code> interface instead.
	 */
	public static final String TABLE_NAME = "ThreadLogger_ThreadLog";

	public static final Object[][] TABLE_COLUMNS = {
		{"threadLogId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"threadName", Types.VARCHAR}, {"stackTrace", Types.VARCHAR},
		{"threadState", Types.VARCHAR}, {"lockName", Types.VARCHAR},
		{"lockOwnerName", Types.VARCHAR}, {"lockOwnerId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("threadLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("threadName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stackTrace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("threadState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lockName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lockOwnerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lockOwnerId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ThreadLogger_ThreadLog (threadLogId LONG not null primary key,createDate DATE null,threadName VARCHAR(1000) null,stackTrace TEXT null,threadState VARCHAR(75) null,lockName VARCHAR(255) null,lockOwnerName VARCHAR(255) null,lockOwnerId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table ThreadLogger_ThreadLog";

	public static final String ORDER_BY_JPQL =
		" ORDER BY threadLog.threadLogId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ThreadLogger_ThreadLog.threadLogId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long THREADLOGID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ThreadLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _threadLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setThreadLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _threadLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ThreadLog.class;
	}

	@Override
	public String getModelClassName() {
		return ThreadLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ThreadLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ThreadLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThreadLog, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((ThreadLog)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ThreadLog, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ThreadLog, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ThreadLog)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ThreadLog, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ThreadLog, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<ThreadLog, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<ThreadLog, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<ThreadLog, Object>>();

			attributeGetterFunctions.put(
				"threadLogId", ThreadLog::getThreadLogId);
			attributeGetterFunctions.put(
				"createDate", ThreadLog::getCreateDate);
			attributeGetterFunctions.put(
				"threadName", ThreadLog::getThreadName);
			attributeGetterFunctions.put(
				"stackTrace", ThreadLog::getStackTrace);
			attributeGetterFunctions.put(
				"threadState", ThreadLog::getThreadState);
			attributeGetterFunctions.put("lockName", ThreadLog::getLockName);
			attributeGetterFunctions.put(
				"lockOwnerName", ThreadLog::getLockOwnerName);
			attributeGetterFunctions.put(
				"lockOwnerId", ThreadLog::getLockOwnerId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<ThreadLog, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ThreadLog, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ThreadLog, ?>>();

			attributeSetterBiConsumers.put(
				"threadLogId",
				(BiConsumer<ThreadLog, Long>)ThreadLog::setThreadLogId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ThreadLog, Date>)ThreadLog::setCreateDate);
			attributeSetterBiConsumers.put(
				"threadName",
				(BiConsumer<ThreadLog, String>)ThreadLog::setThreadName);
			attributeSetterBiConsumers.put(
				"stackTrace",
				(BiConsumer<ThreadLog, String>)ThreadLog::setStackTrace);
			attributeSetterBiConsumers.put(
				"threadState",
				(BiConsumer<ThreadLog, String>)ThreadLog::setThreadState);
			attributeSetterBiConsumers.put(
				"lockName",
				(BiConsumer<ThreadLog, String>)ThreadLog::setLockName);
			attributeSetterBiConsumers.put(
				"lockOwnerName",
				(BiConsumer<ThreadLog, String>)ThreadLog::setLockOwnerName);
			attributeSetterBiConsumers.put(
				"lockOwnerId",
				(BiConsumer<ThreadLog, Long>)ThreadLog::setLockOwnerId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getThreadLogId() {
		return _threadLogId;
	}

	@Override
	public void setThreadLogId(long threadLogId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_threadLogId = threadLogId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalCreateDate() {
		return getColumnOriginalValue("createDate");
	}

	@Override
	public String getThreadName() {
		if (_threadName == null) {
			return "";
		}
		else {
			return _threadName;
		}
	}

	@Override
	public void setThreadName(String threadName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_threadName = threadName;
	}

	@Override
	public String getStackTrace() {
		if (_stackTrace == null) {
			return "";
		}
		else {
			return _stackTrace;
		}
	}

	@Override
	public void setStackTrace(String stackTrace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stackTrace = stackTrace;
	}

	@Override
	public String getThreadState() {
		if (_threadState == null) {
			return "";
		}
		else {
			return _threadState;
		}
	}

	@Override
	public void setThreadState(String threadState) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_threadState = threadState;
	}

	@Override
	public String getLockName() {
		if (_lockName == null) {
			return "";
		}
		else {
			return _lockName;
		}
	}

	@Override
	public void setLockName(String lockName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lockName = lockName;
	}

	@Override
	public String getLockOwnerName() {
		if (_lockOwnerName == null) {
			return "";
		}
		else {
			return _lockOwnerName;
		}
	}

	@Override
	public void setLockOwnerName(String lockOwnerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lockOwnerName = lockOwnerName;
	}

	@Override
	public long getLockOwnerId() {
		return _lockOwnerId;
	}

	@Override
	public void setLockOwnerId(long lockOwnerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lockOwnerId = lockOwnerId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ThreadLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ThreadLog toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ThreadLog>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ThreadLogImpl threadLogImpl = new ThreadLogImpl();

		threadLogImpl.setThreadLogId(getThreadLogId());
		threadLogImpl.setCreateDate(getCreateDate());
		threadLogImpl.setThreadName(getThreadName());
		threadLogImpl.setStackTrace(getStackTrace());
		threadLogImpl.setThreadState(getThreadState());
		threadLogImpl.setLockName(getLockName());
		threadLogImpl.setLockOwnerName(getLockOwnerName());
		threadLogImpl.setLockOwnerId(getLockOwnerId());

		threadLogImpl.resetOriginalValues();

		return threadLogImpl;
	}

	@Override
	public ThreadLog cloneWithOriginalValues() {
		ThreadLogImpl threadLogImpl = new ThreadLogImpl();

		threadLogImpl.setThreadLogId(
			this.<Long>getColumnOriginalValue("threadLogId"));
		threadLogImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		threadLogImpl.setThreadName(
			this.<String>getColumnOriginalValue("threadName"));
		threadLogImpl.setStackTrace(
			this.<String>getColumnOriginalValue("stackTrace"));
		threadLogImpl.setThreadState(
			this.<String>getColumnOriginalValue("threadState"));
		threadLogImpl.setLockName(
			this.<String>getColumnOriginalValue("lockName"));
		threadLogImpl.setLockOwnerName(
			this.<String>getColumnOriginalValue("lockOwnerName"));
		threadLogImpl.setLockOwnerId(
			this.<Long>getColumnOriginalValue("lockOwnerId"));

		return threadLogImpl;
	}

	@Override
	public int compareTo(ThreadLog threadLog) {
		int value = 0;

		if (getThreadLogId() < threadLog.getThreadLogId()) {
			value = -1;
		}
		else if (getThreadLogId() > threadLog.getThreadLogId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ThreadLog)) {
			return false;
		}

		ThreadLog threadLog = (ThreadLog)object;

		long primaryKey = threadLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ThreadLog> toCacheModel() {
		ThreadLogCacheModel threadLogCacheModel = new ThreadLogCacheModel();

		threadLogCacheModel.threadLogId = getThreadLogId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			threadLogCacheModel.createDate = createDate.getTime();
		}
		else {
			threadLogCacheModel.createDate = Long.MIN_VALUE;
		}

		threadLogCacheModel.threadName = getThreadName();

		String threadName = threadLogCacheModel.threadName;

		if ((threadName != null) && (threadName.length() == 0)) {
			threadLogCacheModel.threadName = null;
		}

		threadLogCacheModel.stackTrace = getStackTrace();

		String stackTrace = threadLogCacheModel.stackTrace;

		if ((stackTrace != null) && (stackTrace.length() == 0)) {
			threadLogCacheModel.stackTrace = null;
		}

		threadLogCacheModel.threadState = getThreadState();

		String threadState = threadLogCacheModel.threadState;

		if ((threadState != null) && (threadState.length() == 0)) {
			threadLogCacheModel.threadState = null;
		}

		threadLogCacheModel.lockName = getLockName();

		String lockName = threadLogCacheModel.lockName;

		if ((lockName != null) && (lockName.length() == 0)) {
			threadLogCacheModel.lockName = null;
		}

		threadLogCacheModel.lockOwnerName = getLockOwnerName();

		String lockOwnerName = threadLogCacheModel.lockOwnerName;

		if ((lockOwnerName != null) && (lockOwnerName.length() == 0)) {
			threadLogCacheModel.lockOwnerName = null;
		}

		threadLogCacheModel.lockOwnerId = getLockOwnerId();

		return threadLogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ThreadLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ThreadLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThreadLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ThreadLog)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ThreadLog>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ThreadLog.class, ModelWrapper.class);

	}

	private long _threadLogId;
	private Date _createDate;
	private String _threadName;
	private String _stackTrace;
	private String _threadState;
	private String _lockName;
	private String _lockOwnerName;
	private long _lockOwnerId;

	public <T> T getColumnValue(String columnName) {
		Function<ThreadLog, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ThreadLog)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("threadLogId", _threadLogId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("threadName", _threadName);
		_columnOriginalValues.put("stackTrace", _stackTrace);
		_columnOriginalValues.put("threadState", _threadState);
		_columnOriginalValues.put("lockName", _lockName);
		_columnOriginalValues.put("lockOwnerName", _lockOwnerName);
		_columnOriginalValues.put("lockOwnerId", _lockOwnerId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("threadLogId", 1L);

		columnBitmasks.put("createDate", 2L);

		columnBitmasks.put("threadName", 4L);

		columnBitmasks.put("stackTrace", 8L);

		columnBitmasks.put("threadState", 16L);

		columnBitmasks.put("lockName", 32L);

		columnBitmasks.put("lockOwnerName", 64L);

		columnBitmasks.put("lockOwnerId", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ThreadLog _escapedModel;

}