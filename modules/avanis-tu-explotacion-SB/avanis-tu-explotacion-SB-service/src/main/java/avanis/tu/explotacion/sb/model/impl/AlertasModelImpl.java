/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package avanis.tu.explotacion.sb.model.impl;

import avanis.tu.explotacion.sb.model.Alertas;
import avanis.tu.explotacion.sb.model.AlertasModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Alertas service. Represents a row in the &quot;AVANIS_EXPLOTACION_Alertas&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AlertasModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AlertasImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AlertasImpl
 * @generated
 */
@JSON(strict = true)
public class AlertasModelImpl
	extends BaseModelImpl<Alertas> implements AlertasModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a alertas model instance should use the <code>Alertas</code> interface instead.
	 */
	public static final String TABLE_NAME = "AVANIS_EXPLOTACION_Alertas";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"alertaId", Types.BIGINT},
		{"explotacionId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"description", Types.VARCHAR}, {"endDate", Types.VARCHAR},
		{"startDate", Types.VARCHAR}, {"risk", Types.VARCHAR},
		{"phenomenom", Types.VARCHAR}, {"scope", Types.VARCHAR},
		{"probability", Types.VARCHAR}, {"type_", Types.VARCHAR},
		{"readed", Types.BOOLEAN}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"externalCodeReference", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alertaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("explotacionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("risk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phenomenom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scope", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("probability", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("readed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCodeReference", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AVANIS_EXPLOTACION_Alertas (uuid_ VARCHAR(75) null,alertaId LONG not null primary key,explotacionId LONG,userId LONG,description VARCHAR(255) null,endDate VARCHAR(75) null,startDate VARCHAR(75) null,risk VARCHAR(75) null,phenomenom VARCHAR(255) null,scope VARCHAR(75) null,probability VARCHAR(75) null,type_ VARCHAR(75) null,readed BOOLEAN,createDate DATE null,modifiedDate DATE null,externalCodeReference VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table AVANIS_EXPLOTACION_Alertas";

	public static final String ORDER_BY_JPQL =
		" ORDER BY alertas.alertaId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AVANIS_EXPLOTACION_Alertas.alertaId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long READED_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ALERTAID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AlertasModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _alertaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAlertaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _alertaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Alertas.class;
	}

	@Override
	public String getModelClassName() {
		return Alertas.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Alertas, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Alertas, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Alertas, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Alertas)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Alertas, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Alertas, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Alertas)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Alertas, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Alertas, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Alertas, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Alertas, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Alertas, Object>>();

			attributeGetterFunctions.put("uuid", Alertas::getUuid);
			attributeGetterFunctions.put("alertaId", Alertas::getAlertaId);
			attributeGetterFunctions.put(
				"explotacionId", Alertas::getExplotacionId);
			attributeGetterFunctions.put("userId", Alertas::getUserId);
			attributeGetterFunctions.put(
				"description", Alertas::getDescription);
			attributeGetterFunctions.put("endDate", Alertas::getEndDate);
			attributeGetterFunctions.put("startDate", Alertas::getStartDate);
			attributeGetterFunctions.put("risk", Alertas::getRisk);
			attributeGetterFunctions.put("phenomenom", Alertas::getPhenomenom);
			attributeGetterFunctions.put("scope", Alertas::getScope);
			attributeGetterFunctions.put(
				"probability", Alertas::getProbability);
			attributeGetterFunctions.put("type", Alertas::getType);
			attributeGetterFunctions.put("readed", Alertas::getReaded);
			attributeGetterFunctions.put("createDate", Alertas::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Alertas::getModifiedDate);
			attributeGetterFunctions.put(
				"externalCodeReference", Alertas::getExternalCodeReference);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Alertas, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Alertas, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Alertas, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Alertas, String>)Alertas::setUuid);
			attributeSetterBiConsumers.put(
				"alertaId", (BiConsumer<Alertas, Long>)Alertas::setAlertaId);
			attributeSetterBiConsumers.put(
				"explotacionId",
				(BiConsumer<Alertas, Long>)Alertas::setExplotacionId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Alertas, Long>)Alertas::setUserId);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<Alertas, String>)Alertas::setDescription);
			attributeSetterBiConsumers.put(
				"endDate", (BiConsumer<Alertas, String>)Alertas::setEndDate);
			attributeSetterBiConsumers.put(
				"startDate",
				(BiConsumer<Alertas, String>)Alertas::setStartDate);
			attributeSetterBiConsumers.put(
				"risk", (BiConsumer<Alertas, String>)Alertas::setRisk);
			attributeSetterBiConsumers.put(
				"phenomenom",
				(BiConsumer<Alertas, String>)Alertas::setPhenomenom);
			attributeSetterBiConsumers.put(
				"scope", (BiConsumer<Alertas, String>)Alertas::setScope);
			attributeSetterBiConsumers.put(
				"probability",
				(BiConsumer<Alertas, String>)Alertas::setProbability);
			attributeSetterBiConsumers.put(
				"type", (BiConsumer<Alertas, String>)Alertas::setType);
			attributeSetterBiConsumers.put(
				"readed", (BiConsumer<Alertas, Boolean>)Alertas::setReaded);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Alertas, Date>)Alertas::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Alertas, Date>)Alertas::setModifiedDate);
			attributeSetterBiConsumers.put(
				"externalCodeReference",
				(BiConsumer<Alertas, String>)Alertas::setExternalCodeReference);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAlertaId() {
		return _alertaId;
	}

	@Override
	public void setAlertaId(long alertaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_alertaId = alertaId;
	}

	@JSON
	@Override
	public long getExplotacionId() {
		return _explotacionId;
	}

	@Override
	public void setExplotacionId(long explotacionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_explotacionId = explotacionId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getEndDate() {
		if (_endDate == null) {
			return "";
		}
		else {
			return _endDate;
		}
	}

	@Override
	public void setEndDate(String endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getStartDate() {
		if (_startDate == null) {
			return "";
		}
		else {
			return _startDate;
		}
	}

	@Override
	public void setStartDate(String startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public String getRisk() {
		if (_risk == null) {
			return "";
		}
		else {
			return _risk;
		}
	}

	@Override
	public void setRisk(String risk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_risk = risk;
	}

	@JSON
	@Override
	public String getPhenomenom() {
		if (_phenomenom == null) {
			return "";
		}
		else {
			return _phenomenom;
		}
	}

	@Override
	public void setPhenomenom(String phenomenom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phenomenom = phenomenom;
	}

	@JSON
	@Override
	public String getScope() {
		if (_scope == null) {
			return "";
		}
		else {
			return _scope;
		}
	}

	@Override
	public void setScope(String scope) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scope = scope;
	}

	@JSON
	@Override
	public String getProbability() {
		if (_probability == null) {
			return "";
		}
		else {
			return _probability;
		}
	}

	@Override
	public void setProbability(String probability) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_probability = probability;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@JSON
	@Override
	public boolean getReaded() {
		return _readed;
	}

	@JSON
	@Override
	public boolean isReaded() {
		return _readed;
	}

	@Override
	public void setReaded(boolean readed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_readed = readed;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalReaded() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("readed"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getExternalCodeReference() {
		if (_externalCodeReference == null) {
			return "";
		}
		else {
			return _externalCodeReference;
		}
	}

	@Override
	public void setExternalCodeReference(String externalCodeReference) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalCodeReference = externalCodeReference;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Alertas.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Alertas toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Alertas>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AlertasImpl alertasImpl = new AlertasImpl();

		alertasImpl.setUuid(getUuid());
		alertasImpl.setAlertaId(getAlertaId());
		alertasImpl.setExplotacionId(getExplotacionId());
		alertasImpl.setUserId(getUserId());
		alertasImpl.setDescription(getDescription());
		alertasImpl.setEndDate(getEndDate());
		alertasImpl.setStartDate(getStartDate());
		alertasImpl.setRisk(getRisk());
		alertasImpl.setPhenomenom(getPhenomenom());
		alertasImpl.setScope(getScope());
		alertasImpl.setProbability(getProbability());
		alertasImpl.setType(getType());
		alertasImpl.setReaded(isReaded());
		alertasImpl.setCreateDate(getCreateDate());
		alertasImpl.setModifiedDate(getModifiedDate());
		alertasImpl.setExternalCodeReference(getExternalCodeReference());

		alertasImpl.resetOriginalValues();

		return alertasImpl;
	}

	@Override
	public Alertas cloneWithOriginalValues() {
		AlertasImpl alertasImpl = new AlertasImpl();

		alertasImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		alertasImpl.setAlertaId(this.<Long>getColumnOriginalValue("alertaId"));
		alertasImpl.setExplotacionId(
			this.<Long>getColumnOriginalValue("explotacionId"));
		alertasImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		alertasImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		alertasImpl.setEndDate(this.<String>getColumnOriginalValue("endDate"));
		alertasImpl.setStartDate(
			this.<String>getColumnOriginalValue("startDate"));
		alertasImpl.setRisk(this.<String>getColumnOriginalValue("risk"));
		alertasImpl.setPhenomenom(
			this.<String>getColumnOriginalValue("phenomenom"));
		alertasImpl.setScope(this.<String>getColumnOriginalValue("scope"));
		alertasImpl.setProbability(
			this.<String>getColumnOriginalValue("probability"));
		alertasImpl.setType(this.<String>getColumnOriginalValue("type_"));
		alertasImpl.setReaded(this.<Boolean>getColumnOriginalValue("readed"));
		alertasImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		alertasImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		alertasImpl.setExternalCodeReference(
			this.<String>getColumnOriginalValue("externalCodeReference"));

		return alertasImpl;
	}

	@Override
	public int compareTo(Alertas alertas) {
		int value = 0;

		if (getAlertaId() < alertas.getAlertaId()) {
			value = -1;
		}
		else if (getAlertaId() > alertas.getAlertaId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Alertas)) {
			return false;
		}

		Alertas alertas = (Alertas)object;

		long primaryKey = alertas.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Alertas> toCacheModel() {
		AlertasCacheModel alertasCacheModel = new AlertasCacheModel();

		alertasCacheModel.uuid = getUuid();

		String uuid = alertasCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			alertasCacheModel.uuid = null;
		}

		alertasCacheModel.alertaId = getAlertaId();

		alertasCacheModel.explotacionId = getExplotacionId();

		alertasCacheModel.userId = getUserId();

		alertasCacheModel.description = getDescription();

		String description = alertasCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			alertasCacheModel.description = null;
		}

		alertasCacheModel.endDate = getEndDate();

		String endDate = alertasCacheModel.endDate;

		if ((endDate != null) && (endDate.length() == 0)) {
			alertasCacheModel.endDate = null;
		}

		alertasCacheModel.startDate = getStartDate();

		String startDate = alertasCacheModel.startDate;

		if ((startDate != null) && (startDate.length() == 0)) {
			alertasCacheModel.startDate = null;
		}

		alertasCacheModel.risk = getRisk();

		String risk = alertasCacheModel.risk;

		if ((risk != null) && (risk.length() == 0)) {
			alertasCacheModel.risk = null;
		}

		alertasCacheModel.phenomenom = getPhenomenom();

		String phenomenom = alertasCacheModel.phenomenom;

		if ((phenomenom != null) && (phenomenom.length() == 0)) {
			alertasCacheModel.phenomenom = null;
		}

		alertasCacheModel.scope = getScope();

		String scope = alertasCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			alertasCacheModel.scope = null;
		}

		alertasCacheModel.probability = getProbability();

		String probability = alertasCacheModel.probability;

		if ((probability != null) && (probability.length() == 0)) {
			alertasCacheModel.probability = null;
		}

		alertasCacheModel.type = getType();

		String type = alertasCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			alertasCacheModel.type = null;
		}

		alertasCacheModel.readed = isReaded();

		Date createDate = getCreateDate();

		if (createDate != null) {
			alertasCacheModel.createDate = createDate.getTime();
		}
		else {
			alertasCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			alertasCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			alertasCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		alertasCacheModel.externalCodeReference = getExternalCodeReference();

		String externalCodeReference = alertasCacheModel.externalCodeReference;

		if ((externalCodeReference != null) &&
			(externalCodeReference.length() == 0)) {

			alertasCacheModel.externalCodeReference = null;
		}

		return alertasCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Alertas, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Alertas, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Alertas, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Alertas)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Alertas>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Alertas.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _alertaId;
	private long _explotacionId;
	private long _userId;
	private String _description;
	private String _endDate;
	private String _startDate;
	private String _risk;
	private String _phenomenom;
	private String _scope;
	private String _probability;
	private String _type;
	private boolean _readed;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _externalCodeReference;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Alertas, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Alertas)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("alertaId", _alertaId);
		_columnOriginalValues.put("explotacionId", _explotacionId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("risk", _risk);
		_columnOriginalValues.put("phenomenom", _phenomenom);
		_columnOriginalValues.put("scope", _scope);
		_columnOriginalValues.put("probability", _probability);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("readed", _readed);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"externalCodeReference", _externalCodeReference);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("alertaId", 2L);

		columnBitmasks.put("explotacionId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("description", 16L);

		columnBitmasks.put("endDate", 32L);

		columnBitmasks.put("startDate", 64L);

		columnBitmasks.put("risk", 128L);

		columnBitmasks.put("phenomenom", 256L);

		columnBitmasks.put("scope", 512L);

		columnBitmasks.put("probability", 1024L);

		columnBitmasks.put("type_", 2048L);

		columnBitmasks.put("readed", 4096L);

		columnBitmasks.put("createDate", 8192L);

		columnBitmasks.put("modifiedDate", 16384L);

		columnBitmasks.put("externalCodeReference", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Alertas _escapedModel;

}