/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package avanis.tu.explotacion.sb.model.impl;

import avanis.tu.explotacion.sb.model.Explotacion;
import avanis.tu.explotacion.sb.model.ExplotacionModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Explotacion service. Represents a row in the &quot;AVANIS_EXPLOTACION_Explotacion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ExplotacionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExplotacionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExplotacionImpl
 * @generated
 */
@JSON(strict = true)
public class ExplotacionModelImpl
	extends BaseModelImpl<Explotacion> implements ExplotacionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a explotacion model instance should use the <code>Explotacion</code> interface instead.
	 */
	public static final String TABLE_NAME = "AVANIS_EXPLOTACION_Explotacion";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"explotacionId", Types.BIGINT},
		{"provincia", Types.VARCHAR}, {"longitude", Types.DOUBLE},
		{"height", Types.INTEGER}, {"location", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"latitude", Types.DOUBLE},
		{"meteoredid", Types.VARCHAR}, {"size_", Types.INTEGER},
		{"sizeUnit", Types.VARCHAR}, {"isMain", Types.BOOLEAN},
		{"allowNotifications", Types.BOOLEAN}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"readed", Types.BOOLEAN},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"externalCodeReference", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("explotacionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("provincia", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longitude", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("height", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("latitude", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("meteoredid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("size_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sizeUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isMain", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("allowNotifications", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("readed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCodeReference", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AVANIS_EXPLOTACION_Explotacion (uuid_ VARCHAR(75) null,explotacionId LONG not null primary key,provincia VARCHAR(75) null,longitude DOUBLE,height INTEGER,location VARCHAR(75) null,name VARCHAR(75) null,latitude DOUBLE,meteoredid VARCHAR(75) null,size_ INTEGER,sizeUnit VARCHAR(75) null,isMain BOOLEAN,allowNotifications BOOLEAN,userId LONG,userName VARCHAR(75) null,readed BOOLEAN,createDate DATE null,modifiedDate DATE null,externalCodeReference VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table AVANIS_EXPLOTACION_Explotacion";

	public static final String ORDER_BY_JPQL =
		" ORDER BY explotacion.explotacionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AVANIS_EXPLOTACION_Explotacion.explotacionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPLOTACIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALCODEREFERENCE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISMAIN_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long READED_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ExplotacionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _explotacionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExplotacionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _explotacionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Explotacion.class;
	}

	@Override
	public String getModelClassName() {
		return Explotacion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Explotacion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Explotacion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Explotacion, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Explotacion)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Explotacion, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Explotacion, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Explotacion)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Explotacion, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Explotacion, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Explotacion, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Explotacion, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Explotacion, Object>>();

			attributeGetterFunctions.put("uuid", Explotacion::getUuid);
			attributeGetterFunctions.put(
				"explotacionId", Explotacion::getExplotacionId);
			attributeGetterFunctions.put(
				"provincia", Explotacion::getProvincia);
			attributeGetterFunctions.put(
				"longitude", Explotacion::getLongitude);
			attributeGetterFunctions.put("height", Explotacion::getHeight);
			attributeGetterFunctions.put("location", Explotacion::getLocation);
			attributeGetterFunctions.put("name", Explotacion::getName);
			attributeGetterFunctions.put("latitude", Explotacion::getLatitude);
			attributeGetterFunctions.put(
				"meteoredid", Explotacion::getMeteoredid);
			attributeGetterFunctions.put("size", Explotacion::getSize);
			attributeGetterFunctions.put("sizeUnit", Explotacion::getSizeUnit);
			attributeGetterFunctions.put("isMain", Explotacion::getIsMain);
			attributeGetterFunctions.put(
				"allowNotifications", Explotacion::getAllowNotifications);
			attributeGetterFunctions.put("userId", Explotacion::getUserId);
			attributeGetterFunctions.put("userName", Explotacion::getUserName);
			attributeGetterFunctions.put("readed", Explotacion::getReaded);
			attributeGetterFunctions.put(
				"createDate", Explotacion::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Explotacion::getModifiedDate);
			attributeGetterFunctions.put(
				"externalCodeReference", Explotacion::getExternalCodeReference);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Explotacion, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Explotacion, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Explotacion, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Explotacion, String>)Explotacion::setUuid);
			attributeSetterBiConsumers.put(
				"explotacionId",
				(BiConsumer<Explotacion, Long>)Explotacion::setExplotacionId);
			attributeSetterBiConsumers.put(
				"provincia",
				(BiConsumer<Explotacion, String>)Explotacion::setProvincia);
			attributeSetterBiConsumers.put(
				"longitude",
				(BiConsumer<Explotacion, Double>)Explotacion::setLongitude);
			attributeSetterBiConsumers.put(
				"height",
				(BiConsumer<Explotacion, Integer>)Explotacion::setHeight);
			attributeSetterBiConsumers.put(
				"location",
				(BiConsumer<Explotacion, String>)Explotacion::setLocation);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<Explotacion, String>)Explotacion::setName);
			attributeSetterBiConsumers.put(
				"latitude",
				(BiConsumer<Explotacion, Double>)Explotacion::setLatitude);
			attributeSetterBiConsumers.put(
				"meteoredid",
				(BiConsumer<Explotacion, String>)Explotacion::setMeteoredid);
			attributeSetterBiConsumers.put(
				"size", (BiConsumer<Explotacion, Integer>)Explotacion::setSize);
			attributeSetterBiConsumers.put(
				"sizeUnit",
				(BiConsumer<Explotacion, String>)Explotacion::setSizeUnit);
			attributeSetterBiConsumers.put(
				"isMain",
				(BiConsumer<Explotacion, Boolean>)Explotacion::setIsMain);
			attributeSetterBiConsumers.put(
				"allowNotifications",
				(BiConsumer<Explotacion, Boolean>)
					Explotacion::setAllowNotifications);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<Explotacion, Long>)Explotacion::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Explotacion, String>)Explotacion::setUserName);
			attributeSetterBiConsumers.put(
				"readed",
				(BiConsumer<Explotacion, Boolean>)Explotacion::setReaded);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Explotacion, Date>)Explotacion::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Explotacion, Date>)Explotacion::setModifiedDate);
			attributeSetterBiConsumers.put(
				"externalCodeReference",
				(BiConsumer<Explotacion, String>)
					Explotacion::setExternalCodeReference);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getExplotacionId() {
		return _explotacionId;
	}

	@Override
	public void setExplotacionId(long explotacionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_explotacionId = explotacionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalExplotacionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("explotacionId"));
	}

	@JSON
	@Override
	public String getProvincia() {
		if (_provincia == null) {
			return "";
		}
		else {
			return _provincia;
		}
	}

	@Override
	public void setProvincia(String provincia) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_provincia = provincia;
	}

	@JSON
	@Override
	public Double getLongitude() {
		return _longitude;
	}

	@Override
	public void setLongitude(Double longitude) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_longitude = longitude;
	}

	@JSON
	@Override
	public Integer getHeight() {
		return _height;
	}

	@Override
	public void setHeight(Integer height) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_height = height;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public Double getLatitude() {
		return _latitude;
	}

	@Override
	public void setLatitude(Double latitude) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_latitude = latitude;
	}

	@JSON
	@Override
	public String getMeteoredid() {
		if (_meteoredid == null) {
			return "";
		}
		else {
			return _meteoredid;
		}
	}

	@Override
	public void setMeteoredid(String meteoredid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_meteoredid = meteoredid;
	}

	@JSON
	@Override
	public Integer getSize() {
		return _size;
	}

	@Override
	public void setSize(Integer size) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_size = size;
	}

	@JSON
	@Override
	public String getSizeUnit() {
		if (_sizeUnit == null) {
			return "";
		}
		else {
			return _sizeUnit;
		}
	}

	@Override
	public void setSizeUnit(String sizeUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sizeUnit = sizeUnit;
	}

	@JSON
	@Override
	public boolean getIsMain() {
		return _isMain;
	}

	@JSON
	@Override
	public boolean isIsMain() {
		return _isMain;
	}

	@Override
	public void setIsMain(boolean isMain) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isMain = isMain;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsMain() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isMain"));
	}

	@JSON
	@Override
	public boolean getAllowNotifications() {
		return _allowNotifications;
	}

	@JSON
	@Override
	public boolean isAllowNotifications() {
		return _allowNotifications;
	}

	@Override
	public void setAllowNotifications(boolean allowNotifications) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allowNotifications = allowNotifications;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public boolean getReaded() {
		return _readed;
	}

	@JSON
	@Override
	public boolean isReaded() {
		return _readed;
	}

	@Override
	public void setReaded(boolean readed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_readed = readed;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalReaded() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("readed"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getExternalCodeReference() {
		if (_externalCodeReference == null) {
			return "";
		}
		else {
			return _externalCodeReference;
		}
	}

	@Override
	public void setExternalCodeReference(String externalCodeReference) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalCodeReference = externalCodeReference;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalCodeReference() {
		return getColumnOriginalValue("externalCodeReference");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Explotacion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Explotacion toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Explotacion>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExplotacionImpl explotacionImpl = new ExplotacionImpl();

		explotacionImpl.setUuid(getUuid());
		explotacionImpl.setExplotacionId(getExplotacionId());
		explotacionImpl.setProvincia(getProvincia());
		explotacionImpl.setLongitude(getLongitude());
		explotacionImpl.setHeight(getHeight());
		explotacionImpl.setLocation(getLocation());
		explotacionImpl.setName(getName());
		explotacionImpl.setLatitude(getLatitude());
		explotacionImpl.setMeteoredid(getMeteoredid());
		explotacionImpl.setSize(getSize());
		explotacionImpl.setSizeUnit(getSizeUnit());
		explotacionImpl.setIsMain(isIsMain());
		explotacionImpl.setAllowNotifications(isAllowNotifications());
		explotacionImpl.setUserId(getUserId());
		explotacionImpl.setUserName(getUserName());
		explotacionImpl.setReaded(isReaded());
		explotacionImpl.setCreateDate(getCreateDate());
		explotacionImpl.setModifiedDate(getModifiedDate());
		explotacionImpl.setExternalCodeReference(getExternalCodeReference());

		explotacionImpl.resetOriginalValues();

		return explotacionImpl;
	}

	@Override
	public Explotacion cloneWithOriginalValues() {
		ExplotacionImpl explotacionImpl = new ExplotacionImpl();

		explotacionImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		explotacionImpl.setExplotacionId(
			this.<Long>getColumnOriginalValue("explotacionId"));
		explotacionImpl.setProvincia(
			this.<String>getColumnOriginalValue("provincia"));
		explotacionImpl.setLongitude(
			this.<Double>getColumnOriginalValue("longitude"));
		explotacionImpl.setHeight(
			this.<Integer>getColumnOriginalValue("height"));
		explotacionImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		explotacionImpl.setName(this.<String>getColumnOriginalValue("name"));
		explotacionImpl.setLatitude(
			this.<Double>getColumnOriginalValue("latitude"));
		explotacionImpl.setMeteoredid(
			this.<String>getColumnOriginalValue("meteoredid"));
		explotacionImpl.setSize(this.<Integer>getColumnOriginalValue("size_"));
		explotacionImpl.setSizeUnit(
			this.<String>getColumnOriginalValue("sizeUnit"));
		explotacionImpl.setIsMain(
			this.<Boolean>getColumnOriginalValue("isMain"));
		explotacionImpl.setAllowNotifications(
			this.<Boolean>getColumnOriginalValue("allowNotifications"));
		explotacionImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		explotacionImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		explotacionImpl.setReaded(
			this.<Boolean>getColumnOriginalValue("readed"));
		explotacionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		explotacionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		explotacionImpl.setExternalCodeReference(
			this.<String>getColumnOriginalValue("externalCodeReference"));

		return explotacionImpl;
	}

	@Override
	public int compareTo(Explotacion explotacion) {
		int value = 0;

		if (getExplotacionId() < explotacion.getExplotacionId()) {
			value = -1;
		}
		else if (getExplotacionId() > explotacion.getExplotacionId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Explotacion)) {
			return false;
		}

		Explotacion explotacion = (Explotacion)object;

		long primaryKey = explotacion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Explotacion> toCacheModel() {
		ExplotacionCacheModel explotacionCacheModel =
			new ExplotacionCacheModel();

		explotacionCacheModel.uuid = getUuid();

		String uuid = explotacionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			explotacionCacheModel.uuid = null;
		}

		explotacionCacheModel.explotacionId = getExplotacionId();

		explotacionCacheModel.provincia = getProvincia();

		String provincia = explotacionCacheModel.provincia;

		if ((provincia != null) && (provincia.length() == 0)) {
			explotacionCacheModel.provincia = null;
		}

		Double longitude = getLongitude();

		if (longitude != null) {
			explotacionCacheModel.longitude = longitude;
		}

		Integer height = getHeight();

		if (height != null) {
			explotacionCacheModel.height = height;
		}

		explotacionCacheModel.location = getLocation();

		String location = explotacionCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			explotacionCacheModel.location = null;
		}

		explotacionCacheModel.name = getName();

		String name = explotacionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			explotacionCacheModel.name = null;
		}

		Double latitude = getLatitude();

		if (latitude != null) {
			explotacionCacheModel.latitude = latitude;
		}

		explotacionCacheModel.meteoredid = getMeteoredid();

		String meteoredid = explotacionCacheModel.meteoredid;

		if ((meteoredid != null) && (meteoredid.length() == 0)) {
			explotacionCacheModel.meteoredid = null;
		}

		Integer size = getSize();

		if (size != null) {
			explotacionCacheModel.size = size;
		}

		explotacionCacheModel.sizeUnit = getSizeUnit();

		String sizeUnit = explotacionCacheModel.sizeUnit;

		if ((sizeUnit != null) && (sizeUnit.length() == 0)) {
			explotacionCacheModel.sizeUnit = null;
		}

		explotacionCacheModel.isMain = isIsMain();

		explotacionCacheModel.allowNotifications = isAllowNotifications();

		explotacionCacheModel.userId = getUserId();

		explotacionCacheModel.userName = getUserName();

		String userName = explotacionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			explotacionCacheModel.userName = null;
		}

		explotacionCacheModel.readed = isReaded();

		Date createDate = getCreateDate();

		if (createDate != null) {
			explotacionCacheModel.createDate = createDate.getTime();
		}
		else {
			explotacionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			explotacionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			explotacionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		explotacionCacheModel.externalCodeReference =
			getExternalCodeReference();

		String externalCodeReference =
			explotacionCacheModel.externalCodeReference;

		if ((externalCodeReference != null) &&
			(externalCodeReference.length() == 0)) {

			explotacionCacheModel.externalCodeReference = null;
		}

		return explotacionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Explotacion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Explotacion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Explotacion, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Explotacion)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Explotacion>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Explotacion.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _explotacionId;
	private String _provincia;
	private Double _longitude;
	private Integer _height;
	private String _location;
	private String _name;
	private Double _latitude;
	private String _meteoredid;
	private Integer _size;
	private String _sizeUnit;
	private boolean _isMain;
	private boolean _allowNotifications;
	private long _userId;
	private String _userName;
	private boolean _readed;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _externalCodeReference;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Explotacion, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Explotacion)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("explotacionId", _explotacionId);
		_columnOriginalValues.put("provincia", _provincia);
		_columnOriginalValues.put("longitude", _longitude);
		_columnOriginalValues.put("height", _height);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("latitude", _latitude);
		_columnOriginalValues.put("meteoredid", _meteoredid);
		_columnOriginalValues.put("size_", _size);
		_columnOriginalValues.put("sizeUnit", _sizeUnit);
		_columnOriginalValues.put("isMain", _isMain);
		_columnOriginalValues.put("allowNotifications", _allowNotifications);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("readed", _readed);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"externalCodeReference", _externalCodeReference);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("size_", "size");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("explotacionId", 2L);

		columnBitmasks.put("provincia", 4L);

		columnBitmasks.put("longitude", 8L);

		columnBitmasks.put("height", 16L);

		columnBitmasks.put("location", 32L);

		columnBitmasks.put("name", 64L);

		columnBitmasks.put("latitude", 128L);

		columnBitmasks.put("meteoredid", 256L);

		columnBitmasks.put("size_", 512L);

		columnBitmasks.put("sizeUnit", 1024L);

		columnBitmasks.put("isMain", 2048L);

		columnBitmasks.put("allowNotifications", 4096L);

		columnBitmasks.put("userId", 8192L);

		columnBitmasks.put("userName", 16384L);

		columnBitmasks.put("readed", 32768L);

		columnBitmasks.put("createDate", 65536L);

		columnBitmasks.put("modifiedDate", 131072L);

		columnBitmasks.put("externalCodeReference", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Explotacion _escapedModel;

}